----- 1. Locate the ruby documentation for methods File::path and File#path. How are they different?

File::path
path(path) -> string
File.path()
  => returns the string representation of the path

File#path
path -> filename
File.new().path
  => returns path name used to create file as string
  
my_answer =>
File::path is a class method whereas File#path is an instance method. The instance method
is applied directly to the object. The class method is applied to the class File.
File::path, provided a path, will return the file path as a string.

correct_answer =>
File::path is a class method, while File#path is an instance method.
Class methods are called on the class, while instance methods are called on objects.


----- 2. Assume you have the following code. What will each of the 4 puts statements print?

require 'date'

puts Date.civil
puts Date.civil(2016)
puts Date.civil(2016, 5)
puts Date.civil(2016, 5, 13)

my_answer =>
#<Date: -4712-01-01>
#<Date: 2016-01-01>
#<Date: 2016-05-01>
#<Date: 2016-05-13>

correct_answer =>
-4712-01-01
2016-01-01
2016-05-01
2016-05-13


----- 3. Consider the following method and a call to that method. Use the ruby documentation
to determine what this code will print.

def my_method(a, b = 2, c = 3, d)
  p [a, b, c, d]
end

my_method(4, 5, 6)

my_answer =>
[4, 5, 3, 6]


----- 4. The Array#bsearch method is used to search ordered Arrays more quickly than #find
and #select can. Assume you have the following code. How would you search this Array to find
the first element whose value exceeds 8?

a = [1, 4, 8, 11, 15, 19]

my_answer =>
a.bsearch {|x| x >= 8}

correct_answer =>
value = a.bsearch { |element| element > 8 }
puts value
# the question is asking for a value that exceeds 8 so it can't be >= must be >


----- 5. What do each of these puts statements output?

a = %w(a b c d e)
puts a.fetch(7)
puts a.fetch(7, 'beats me')
puts a.fetch(7) { |index| index**2 }

my_answer =>
IndexError
'beats me'
14

correct_answer =>
IndexError: index 7 outside of array bounds: -5...5
beats me
49


----- 6. What does this code print?

5.step(to: 10, by: 3) { |value| puts value }

my_answer =>
5 8

correct_answer =>
5
8


----- 7. How would you modify this code to print just the public methods that are defined or
overridden by the String class? That is, the list should exclude all members that are only defined
in Object, BasicObject, and Kernel.

s = 'abc'
puts s.public_methods.inspect

my_answer =>
s = 'abc'
puts s.method(:String)

correct_answer =>
s = 'abc'
puts s.public_methods(false).inspect


----- 8. Find the documentation for the #min method and change the above code to print the two
smallest values in the Array.

a = [5, 9, 3, 11]
puts a.min


my_answer =>
puts a.min(2)


----- 9. Find the documentation for YAML::load_file.

require 'yaml'
MESSAGES = YAML.load_file('calculator_messages.yml')

my_answer =>
module Bundler:YAMLSerializer
https://docs.ruby-lang.org/en/2.6.0/Bundler/YAMLSerializer.html

module Psych
https://docs.ruby-lang.org/en/2.6.0/Psych.html#method-c-load_file

similar_answer =>
https://ruby-doc.org/stdlib-3.0.0/libdoc/psych/rdoc/Psych.html